- To connect nextJS to prisma we need to install two packages:

1. Prisma: Needed in dev mode or CI/CD pipeline. It helps manage the database by creating and executing migration, pulling/pushing from/to database. It is hoever not needed in production 
2. Prisma client: It is used to connect the postgresQL database to the NextJS application and also executes the sequel queries. It is required in production

- After installing those two packages, initialize prisma with command: "npx prisma init"

- Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
3. Run "npx prisma db pull" to turn your database schema into a Prisma schema.
4. Run "npx prisma generate dev --name <migration name>" to generate the Prisma Client. You can then start querying your database.

NB: Prisma client stores all the type definitions inside node_modules directory, so, when building and deploying the application to vercel or CI/CD 
pipeline, we need to re-install all the node_modules and re-generate the prisma client type definitions as part of the build process or post-installation generate them.
This can be done by modifying the build script inside the package.json file as: "build": "npx prisma generate && next build"

Seeding: 

This new branch is created for integrating next-auth with the project.
In setting up this next-auth, credential provider method with jwt as session strategy will be used so that the user's credential received
from the client (username/email and password) can be authenticated against what is in the database.
-   install next-auth package using "npm install next-auth"
-   create a dynamic, catch all directory and create a "route.ts" file inside the "api" directory - "[...nextauth]/route.ts" file.
-   Configure the route.ts file as follows:

import NextAuth,{type NextAuthOptions} from "next-auth"
import CredentialProvider from "next-auth/providers/credentials"


export const authOptions: NextAuthOptions = {
  
  session: {
     strategy: "jwt"
  },
  providers: [
    CredentialProvider({
      name: "Sign in",
      credentials: {
        email: {
            label: 'Email',
            type: 'email',
            placeholder: "someone@example.com"
        },
        password: {
            label: "Password",
            type: "password"
        },
      },
      async authorize(credentials) {
          // Handle auth
          const user = {id: '1', name: 'foo', email: 'foo@gmail.com'}
          return user
      },
    }),
    // ...add more providers here
  ],
}

const handler =  NextAuth(authOptions)
export {handler as GET, handler as POST}

-   Inside the .env.local file, add enviroment variable "NEXTAUTH_SECRET=<random string>". This will be used to sign the jwt